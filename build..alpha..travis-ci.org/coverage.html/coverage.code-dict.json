{"/home/travis/build/npmtest/node-npmtest-rpi-gpio/test.js":"/* istanbul instrument in package npmtest_rpi_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rpi-gpio/lib.npmtest_rpi_gpio.js":"/* istanbul instrument in package npmtest_rpi_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rpi_gpio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rpi_gpio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rpi-gpio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rpi-gpio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rpi_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rpi_gpio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rpi_gpio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_rpi_gpio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rpi_gpio.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_rpi_gpio.__dirname +\n                    '/lib.npmtest_rpi_gpio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rpi-gpio/node_modules/rpi-gpio/rpi-gpio.js":"var fs           = require('fs');\nvar util         = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar async        = require('async');\nvar debug        = require('debug')('rpi-gpio');\nvar Epoll        = require('epoll').Epoll;\n\nvar PATH = '/sys/class/gpio';\nvar PINS = {\n    v1: {\n        // 1: 3.3v\n        // 2: 5v\n        '3':  0,\n        // 4: 5v\n        '5':  1,\n        // 6: ground\n        '7':  4,\n        '8':  14,\n        // 9: ground\n        '10': 15,\n        '11': 17,\n        '12': 18,\n        '13': 21,\n        // 14: ground\n        '15': 22,\n        '16': 23,\n        // 17: 3.3v\n        '18': 24,\n        '19': 10,\n        // 20: ground\n        '21': 9,\n        '22': 25,\n        '23': 11,\n        '24': 8,\n        // 25: ground\n        '26': 7\n    },\n    v2: {\n        // 1: 3.3v\n        // 2: 5v\n        '3':  2,\n        // 4: 5v\n        '5':  3,\n        // 6: ground\n        '7':  4,\n        '8':  14,\n        // 9: ground\n        '10': 15,\n        '11': 17,\n        '12': 18,\n        '13': 27,\n        // 14: ground\n        '15': 22,\n        '16': 23,\n        // 17: 3.3v\n        '18': 24,\n        '19': 10,\n        // 20: ground\n        '21': 9,\n        '22': 25,\n        '23': 11,\n        '24': 8,\n        // 25: ground\n        '26': 7,\n\n        // Model B+ pins\n        // 27: ID_SD\n        // 28: ID_SC\n        '29': 5,\n        // 30: ground\n        '31': 6,\n        '32': 12,\n        '33': 13,\n        // 34: ground\n        '35': 19,\n        '36': 16,\n        '37': 26,\n        '38': 20,\n        // 39: ground\n        '40': 21\n    }\n};\n\nfunction Gpio() {\n    var currentPins;\n    var exportedInputPins = {};\n    var exportedOutputPins = {};\n    var getPinForCurrentMode = getPinRpi;\n    var pollers = {};\n\n    this.DIR_IN   = 'in';\n    this.DIR_OUT  = 'out';\n    this.DIR_LOW  = 'low';\n    this.DIR_HIGH = 'high';\n\n    this.MODE_RPI = 'mode_rpi';\n    this.MODE_BCM = 'mode_bcm';\n\n    this.EDGE_NONE    = 'none';\n    this.EDGE_RISING  = 'rising';\n    this.EDGE_FALLING = 'falling';\n    this.EDGE_BOTH    = 'both';\n\n    /**\n     * Set pin reference mode. Defaults to 'mode_rpi'.\n     *\n     * @param {string} mode Pin reference mode, 'mode_rpi' or 'mode_bcm'\n     */\n    this.setMode = function(mode) {\n        if (mode === this.MODE_RPI) {\n            getPinForCurrentMode = getPinRpi;\n        } else if (mode === this.MODE_BCM) {\n            getPinForCurrentMode = getPinBcm;\n        } else {\n            throw new Error('Cannot set invalid mode');\n        }\n    };\n\n    /**\n     * Setup a channel for use as an input or output\n     *\n     * @param {number}   channel   Reference to the pin in the current mode's schema\n     * @param {string}   direction The pin direction, either 'in' or 'out'\n     * @param edge       edge Informs the GPIO chip if it needs to generate interrupts. Either 'none', 'rising', 'falling' or 'both'. Defaults to 'none'\n     * @param {function} onSetup   Optional callback\n     */\n    this.setup = function(channel, direction, edge, onSetup /*err*/) {\n        if (arguments.length === 2 && typeof direction == 'function') {\n            onSetup = direction;\n            direction = this.DIR_OUT;\n            edge = this.EDGE_NONE;\n        } else if (arguments.length === 3 && typeof edge == 'function') {\n            onSetup = edge;\n            edge = this.EDGE_NONE;\n        }\n\n        channel = parseInt(channel)\n        direction = direction || this.DIR_OUT;\n        edge = edge || this.EDGE_NONE;\n        onSetup = onSetup || function() {};\n\n        if (typeof channel !== 'number') {\n            return process.nextTick(function() {\n                onSetup(new Error('Channel must be a number'));\n            });\n        }\n\n        if (direction !== this.DIR_IN && direction !== this.DIR_OUT && direction !== this.DIR_LOW && direction !== this.DIR_HIGH) {\n            return process.nextTick(function() {\n                onSetup(new Error('Cannot set invalid direction'));\n            });\n        }\n\n        if ([\n            this.EDGE_NONE,\n            this.EDGE_RISING,\n            this.EDGE_FALLING,\n            this.EDGE_BOTH\n        ].indexOf(edge) == -1) {\n            return process.nextTick(function() {\n                onSetup(new Error('Cannot set invalid edge'));\n            });\n        }\n\n        var pinForSetup;\n        async.waterfall([\n            setRaspberryVersion,\n            function(next) {\n                pinForSetup = getPinForCurrentMode(channel);\n                if (!pinForSetup) {\n                    return next(new Error('Channel ' + channel + ' does not map to a GPIO pin'));\n                }\n                debug('set up pin %d', pinForSetup);\n                isExported(pinForSetup, next);\n            },\n            function(isExported, next) {\n                if (isExported) {\n                    return unexportPin(pinForSetup, next);\n                }\n                return next(null);\n            },\n            function(next) {\n                exportPin(pinForSetup, next);\n            },\n            function(next) {\n              async.retry({times: 100, interval: 10},\n                function(cb){\n                  setEdge(pinForSetup, edge, cb);\n                },\n                function(err){\n                  // wrapped here because waterfall can't handle positive result\n                  next(err);\n                });\n            },\n            function(next) {\n                if (direction === this.DIR_IN) {\n                    exportedInputPins[pinForSetup] = true;\n                } else {\n                    exportedOutputPins[pinForSetup] = true;\n                }\n\n                async.retry({times: 100, interval: 10},\n                  function(cb) {\n                    setDirection(pinForSetup, direction, cb);\n                  },\n                  function(err) {\n                    // wrapped here because waterfall can't handle positive result\n                    next(err);\n                  });\n            }.bind(this),\n            function(next) {\n                listen(channel, function(readChannel) {\n                    this.read(readChannel, function(err, value) {\n                        if (err) {\n                            debug(\n                                'Error reading channel value after change, %d',\n                                readChannel\n                            );\n                            return\n                        }\n                        debug('emitting change on channel %s with value %s', readChannel, value);\n                        this.emit('change', readChannel, value);\n                    }.bind(this));\n                }.bind(this));\n                next()\n            }.bind(this)\n        ], onSetup);\n    };\n\n    /**\n     * Write a value to a channel\n     *\n     * @param {number}   channel The channel to write to\n     * @param {boolean}  value   If true, turns the channel on, else turns off\n     * @param {function} cb      Optional callback\n     */\n    this.write = this.output = function(channel, value, cb /*err*/) {\n        var pin = getPinForCurrentMode(channel);\n        cb = cb || function() {}\n\n        if (!exportedOutputPins[pin]) {\n            return process.nextTick(function() {\n                cb(new Error('Pin has not been exported for write'));\n            });\n        }\n\n        value = (!!value && value !== '0') ? '1' : '0';\n\n        debug('writing pin %d with value %s', pin, value);\n        fs.writeFile(PATH + '/gpio' + pin + '/value', value, cb);\n    };\n\n    /**\n     * Read a value from a channel\n     *\n     * @param {number}   channel The channel to read from\n     * @param {function} cb      Callback which receives the channel's boolean value\n     */\n    this.read = this.input = function(channel, cb /*err,value*/) {\n        if (typeof cb !== 'function') {\n            throw new Error('A callback must be provided')\n        }\n\n        var pin = getPinForCurrentMode(channel);\n\n        if (!exportedInputPins[pin] && !exportedOutputPins[pin]) {\n            return process.nextTick(function() {\n                cb(new Error('Pin has not been exported'));\n            });\n        }\n\n        fs.readFile(PATH + '/gpio' + pin + '/value', 'utf-8', function(err, data) {\n            if (err) {\n                return cb(err)\n            }\n            data = (data + '').trim() || '0';\n            debug('read pin %s with value %s', pin, data);\n            return cb(null, data === '1');\n        });\n    };\n\n    /**\n     * Unexport any pins setup by this module\n     *\n     * @param {function} cb Optional callback\n     */\n    this.destroy = function(cb) {\n        var tasks = Object.keys(exportedOutputPins)\n            .concat(Object.keys(exportedInputPins))\n            .map(function(pin) {\n                return function(done) {\n                    removeListener(pin, pollers)\n                    unexportPin(pin, done);\n                }\n            });\n\n        async.parallel(tasks, cb);\n    };\n\n    /**\n     * Reset the state of the module\n     */\n    this.reset = function() {\n        exportedOutputPins = {};\n        exportedInputPins = {};\n        this.removeAllListeners();\n\n        currentPins = undefined;\n        getPinForCurrentMode = getPinRpi;\n        pollers = {}\n    };\n\n    // Init\n    EventEmitter.call(this);\n    this.reset();\n\n\n    // Private functions requring access to state\n    function setRaspberryVersion(cb) {\n        if (currentPins) {\n            return cb(null);\n        }\n\n        fs.readFile('/proc/cpuinfo', 'utf8', function(err, data) {\n            if (err) return cb(err);\n\n            // Match the last 4 digits of the number following \"Revision:\"\n            var match = data.match(/Revision\\s*:\\s*[0-9a-f]*([0-9a-f]{4})/);\n            var revisionNumber = parseInt(match[1], 16);\n            var pinVersion = (revisionNumber < 4) ? 'v1' : 'v2';\n\n            debug(\n                'seen hardware revision %d; using pin mode %s',\n                revisionNumber,\n                pinVersion\n            );\n\n            currentPins = PINS[pinVersion];\n\n            return cb(null);\n        });\n    };\n\n    function getPinRpi(channel) {\n        return currentPins[channel] + '';\n    };\n\n    function getPinBcm(channel) {\n        channel = parseInt(channel, 10);\n        return [\n            3,\n            5,\n            7,\n            8,\n            10,\n            11,\n            12,\n            13,\n            15,\n            16,\n            18,\n            19,\n            21,\n            22,\n            23,\n            24,\n            26,\n            29,\n            31,\n            32,\n            33,\n            35,\n            36,\n            37,\n            38,\n            40\n        ].indexOf(channel) !== -1 ? (channel + '') : null;\n    };\n\n    /**\n     * Listen for interrupts on a channel\n     *\n     * @param {number}      channel The channel to watch\n     * @param {function}    cb Callback which receives the channel's err\n     */\n    function listen(channel, onChange) {\n        var pin = getPinForCurrentMode(channel);\n\n        if (!exportedInputPins[pin] && !exportedOutputPins[pin]) {\n            throw new Error('Channel %d has not been exported', channel);\n        }\n\n        debug('listen for pin %d', pin);\n        var poller = new Epoll(function(err, innerfd, events) {\n            if (err) throw err\n            clearInterrupt(innerfd);\n            onChange(channel);\n        });\n\n        var fd = fs.openSync(PATH + '/gpio' + pin + '/value', 'r+');\n        clearInterrupt(fd);\n        poller.add(fd, Epoll.EPOLLPRI);\n        // Append ready-to-use remove function\n        pollers[pin] = function() {\n            poller.remove(fd).close();\n        }\n    };\n}\nutil.inherits(Gpio, EventEmitter);\n\nfunction setEdge(pin, edge, cb) {\n    debug('set edge %s on pin %d', edge.toUpperCase(), pin);\n    fs.writeFile(PATH + '/gpio' + pin + '/edge', edge, function(err) {\n        if (cb) return cb(err);\n    });\n}\n\nfunction setDirection(pin, direction, cb) {\n    debug('set direction %s on pin %d', direction.toUpperCase(), pin);\n    fs.writeFile(PATH + '/gpio' + pin + '/direction', direction, function(err) {\n        if (cb) return cb(err);\n    });\n}\n\nfunction exportPin(pin, cb) {\n    debug('export pin %d', pin);\n    fs.writeFile(PATH + '/export', pin, function(err) {\n        if (cb) return cb(err);\n    });\n}\n\nfunction unexportPin(pin, cb) {\n    debug('unexport pin %d', pin);\n    fs.writeFile(PATH + '/unexport', pin, function(err) {\n        if (cb) return cb(err);\n    });\n}\n\nfunction isExported(pin, cb) {\n    fs.exists(PATH + '/gpio' + pin, function(exists) {\n        return cb(null, exists);\n    });\n}\n\nfunction removeListener(pin, pollers) {\n    if (!pollers[pin]) {\n        return\n    }\n    debug('remove listener for pin %d', pin)\n    pollers[pin]()\n    delete pollers[pin]\n}\n\nfunction clearInterrupt(fd) {\n    fs.readSync(fd, new Buffer(1), 0, 1, 0);\n}\n\nmodule.exports = new Gpio;\n"}